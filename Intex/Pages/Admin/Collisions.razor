@page "/admin/collisions"
@page "/admin"
@inherits OwningComponentBase<ICollisionsRepository>

    @*<div class="form-group">
        <label>Search by Crash ID</label>
        <InputText class="form-control"></InputText>
    </div>*@

<NavLink class="btn btn-primary" href="/admin/collisions/create">Create</NavLink><br />

    @*<EditForm Model="@CollisionData" OnValidSubmit="@Search">
        <label>Search by Crash ID</label>
        <InputText @bind-Value="id"></InputText>
        <button type="submit" class="btn btn-primary">Search</button>
    </EditForm>*@

<table class="table table-sm table-striped table-bordered">


    <thead>
        <tr>
            <td>Crash ID</td>
            <td>Date</td>
            <td>Road</td>
            <td>City</td>
            <td>County</td>
            <td>Crash Severity</td>
        </tr>
    </thead>

    <tbody>
        @if (CollisionData?.Count() > 0)
        {
            // List the collisions
            @foreach (Collision c in CollisionData)
            {
                <tr>
                    <td>@c.CRASH_ID</td>
                    <td>@c.CRASH_DATETIME</td>
                    <td>@c.MAIN_ROAD_NAME</td>
                    <td>@c.CITY</td>
                    <td>@c.COUNTY_NAME</td>
                    <td>@c.CRASH_SEVERITY_ID</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.CRASH_ID)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetEditUrl(c.CRASH_ID)">Edit</NavLink>
                    </td>

                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveCollision(c))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Collisions</td>
            </tr>
        }
    </tbody>
</table>





@code {

    @using Microsoft.AspNetCore.Mvc;

    @using System.IO

    @using Microsoft.AspNetCore.Components;
    @using Microsoft.JSInterop
    @inject IJSRuntime JSRuntime


    public ICollisionsRepository repo => Service;

    public IEnumerable<Collision> CollisionData { get; set; }

    private string searchTerm;

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        CollisionData = await repo.Collisions.Take(50).ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/collisions/details/{id}";
    public string GetEditUrl(long id) => $"/admin/collisions/edit/{id}";

    public async Task RemoveCollision(Collision c)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete collision '{c.CRASH_ID}'?"))
            return;
        repo.DeleteCollision(c);
        await UpdateData();
    }

    @*@using Microsoft.AspNetCore.Mvc;*@

public ICollisionsRepository repo => Service;

public IEnumerable<Collision> CollisionData { get; set; }

private string searchTerm;

protected async override Task OnInitializedAsync()
{
    await UpdateData();
}

public async Task UpdateData()
{

    CollisionData = await repo.Collisions.Take(50).ToListAsync();
}

public string GetDetailsUrl(long id) => $"/admin/collisions/details/{id}";
public string GetEditUrl(long id) => $"/admin/collisions/edit/{id}";

public async Task RemoveCollision(Collision c)
{
    repo.DeleteCollision(c);
    await UpdateData();
}

//public async Task Search(int id)
//{
//    CollisionData = await repo.Collisions.Where(x => x.CRASH_ID == id);
//}


// no clue what this does
//public ActionResult Search(int? searching)
//{
//    if (searching.HasValue)
//    {
//        return View(repo.Collisions.Where(x => x.CRASH_ID.ToString().Contains(searching.ToString())).ToList());
//    }
//    else
//    {
//        return View(repo.Collisions.ToList());
//    }
//}

}

